*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: it.fossoft.timberfoss
Package Version Name: 1.6.1
Package Version Code: 21
Min Sdk: 16
Target Sdk: 27
MD5   : a317272507314b4c4197d6733c5ab725
SHA1  : 54aa3980add31470fcac1e069b32bf3ef155a665
SHA256: 380978bb333d2d75496a90cc5252e07f084f95e9f87bea59ed60b1686531a80f
SHA512: 30f40733d67daf94c72a3b60e7f75d92b5bb7a9917104d2d7941c7494dd069a0adbeb1a40dcd6e7c24e5c12082c642af3c2f4b95b7e503994912432a9fbe3e0a
Analyze Signature: fdbf918e88df650801df5ee2f629c64e3014e44eeb6a83884264331f96605f29abad6eebb4c1160c9570bec2df196d680fec264e9c4973434c480acfc7fa2d12
------------------------------------------------------------------------------------------------
[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
           Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.naman14.timber.WearBrowserService
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:1):
               http://ws.audioscrobbler.com/2.0
                   => Lcom/naman14/timber/lastfmapi/LastFmClient;->getInstance(Landroid/content/Context;)Lcom/naman14/timber/lastfmapi/LastF
                    mClient;
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/afollestad/materialdialogs/folderselector/FileChooserDialog$Builder;-><init>(Landroid/support/v7/app/AppCompatActivit
                    y;)V (0x12) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/afollestad/materialdialogs/folderselector/FolderChooserDialog$Builder;-><init>(Landroid/support/v7/app/AppCompatActiv
                    ity;)V (0x22) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/nostra13/universalimageloader/utils/StorageUtils;->getExternalCacheDir(Landroid/content/Context;)Ljava/io/File; (0x8)
                    ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/nostra13/universalimageloader/utils/StorageUtils;->getOwnCacheDirectory(Landroid/content/Context;
                    Ljava/lang/String;)Ljava/io/File; (0x28) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/nostra13/universalimageloader/utils/StorageUtils;->getOwnCacheDirectory(Landroid/content/Context; Ljava/lang/String;
                    Z)Ljava/io/File; (0x2c) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/afollestad/materialdialogs/folderselector/FileChooserDialog;->onSelection(Lcom/afollestad/materialdialogs/MaterialDia
                    log; Landroid/view/View; I Ljava/lang/CharSequence;)V (0x9c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/afollestad/materialdialogs/folderselector/FolderChooserDialog;->onSelection(Lcom/afollestad/materialdialogs/MaterialD
                    ialog; Landroid/view/View; I Ljava/lang/CharSequence;)V (0x9c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                 receiver => com.naman14.timber.widgets.desktop.StandardWidget
                 receiver => com.naman14.timber.widgets.desktop.WhiteWidget
                 receiver => com.naman14.timber.widgets.desktop.SmallWidget
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/naman14/timber/utils/TimberUtils;->deleteTracks(Landroid/content/Context; [J)V (0x114) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache;->deleteIfExists(Ljava/io/File;)V (0xc) --->
                    Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache;->open(Ljava/io/File; I I J
                    I)Lcom/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache; (0x78) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache;->rebuildJournal()V (0x198) --->
                    Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache;->remove(Ljava/lang/String;)Z (0x52) --->
                    Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/ext/Util;->deleteContents(Ljava/io/File;)V (0x58) --->
                    Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/utils/DiskCacheUtils;->removeFromCache(Ljava/lang/String;
                    Lcom/nostra13/universalimageloader/cache/disc/DiskCache;)Z (0x18) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache;->clear()V (0x1c) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache;->remove(Ljava/lang/String;)Z (0x8) --->
                    Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache;->save(Ljava/lang/String; Landroid/graphics/Bitmap;)Z
                    (0x80) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache;->save(Ljava/lang/String; Landroid/graphics/Bitmap;)Z
                    (0x96) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache;->save(Ljava/lang/String; Ljava/io/InputStream;
                    Lcom/nostra13/universalimageloader/utils/IoUtils$CopyListener;)Z (0x7e) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache;->save(Ljava/lang/String; Ljava/io/InputStream;
                    Lcom/nostra13/universalimageloader/utils/IoUtils$CopyListener;)Z (0xae) ---> Ljava/io/File;->delete()Z
               => Lcom/squareup/okhttp/internal/io/FileSystem$1;->delete(Ljava/io/File;)V (0x0) ---> Ljava/io/File;->delete()Z
               => Lcom/squareup/okhttp/internal/io/FileSystem$1;->deleteContents(Ljava/io/File;)V (0x58) ---> Ljava/io/File;->delete()Z
               => Lfi/iki/elonen/NanoHTTPD$DefaultTempFile;->delete()V (0xe) ---> Ljava/io/File;->delete()Z
               => Lcom/nostra13/universalimageloader/cache/disc/impl/LimitedAgeDiskCache;->get(Ljava/lang/String;)Ljava/io/File; (0x68) --->
                    Ljava/io/File;->delete()Z
[Notice] <KeyStore><Hacker> KeyStore Protection Information:
           The Keystores below are "protected" by password and seem using SSL-pinning (Total: 1). You can use "Portecle" tool to manage the
           certificates in the KeyStore:
               => Lfi/iki/elonen/NanoHTTPD;->makeSSLSocketFactory(Ljava/lang/String; [C)Ljavax/net/ssl/SSLServerSocketFactory; (0x4e) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                  service => com.naman14.timber.WearBrowserService
                 receiver => com.naman14.timber.helpers.MediaButtonIntentReceiver
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 7.993734 secs
Total elapsed time: 32.529622 secs
